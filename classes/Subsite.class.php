<?php
/************************************************************************/
/* ATutor                                                               */
/************************************************************************/
/* Copyright (c) 2012                                                   */
/* Inclusive Design Institute                                           */
/* http://atutor.ca                                                     */
/*                                                                      */
/* This program is free software. You can redistribute it and/or        */
/* modify it under the terms of the GNU General Public License          */
/* as published by the Free Software Foundation.                        */
/************************************************************************/
// $Id$

/**
* Subsite
* Class for subsite creation
* @access	public
* @author	Cindy Qi Li
* @package	Patch
*/

if (!defined('AT_INCLUDE_PATH')) { exit; }

require(AT_INCLUDE_PATH . 'classes/sqlutility.class.php');
require(AT_INCLUDE_PATH . 'install/install.inc.php');
require(AT_INCLUDE_PATH . 'install/config_template.php');
require(AT_INCLUDE_PATH . '../mods/manage_multi/lib/mysql_multisite_connect.inc.php');

class Subsite {

	// all private
	var $make_multi_script;           // the shell script to create subsite directory
	var $subsite_main_dir;            // the main directory where all the subsites are created in
	var $site_url;                 // the url of the subsite, eg, myself.atutor.ca

	/**
	* Constructor: Initialize object members
	* @access  public
	* @param   $patch_array	The name of the file to find charset definition
	*          $patch_summary_array
	*          $skipFilesModified
	* @author  Cindy Qi Li
	*/
	function Subsite() 
	{
		$this->make_multi_script = 'exec/make_multi.sh';
		$this->subsite_main_dir = $this->get_subsite_main_dir();
	}

	/**
	* Main process to create subsite.
	* @access  public
	* @param   site_name string
	* @param   enabled   0/1
	* @return  true  if subsite is successfully created
	*          false if failed
	*          the progress or error information are saved into global var $msg
	* @author  Cindy Qi Li
	*/
	public function create($site_name, $enabled) 
	{
		global $msg, $addslashes;
		
		$site_name = $addslashes(str_replace(' ', '', $site_name));
		$this->site_url = $addslashes($this->get_site_url($site_name));
		$enabled = intval(enabled);
		
		// Checks on
		// 1. if there's error from class constructor 
		// 2. if svn server is up. If not, consider all files manipulated by patch as modified
		// 3. if the local file is customized by user
		// 4. if script has write priviledge on local file/folder
		// 5. if dependent patches have been installed
		
		$this->switch_subsite_manage_db();
		
		// check the uniqueness of the requested site
		if (!$this->is_site_unique($this->site_url)) {
			$msg->addError(array("SUBSITE_ALREADY_EXIST", $this->site_url, implode(", ", $this->get_unique_site_urls($site_name))));
			$this->finalize();
			return false;
		}
		
		// create subsite phisical directory
		if (!$this->create_subsite_dir()) {
			$this->finalize();
			return false;
		}
		
		// create and switch to subsite database
		$subsite_db_name = $this->get_unique_db_name($site_name, DB_HOST_MULTISITE, DB_PORT_MULTISITE, DB_USER_MULTISITE, DB_PASSWORD_MULTISITE);
		$subsite_db = create_and_switch_db(DB_HOST_MULTISITE, DB_PORT_MULTISITE, DB_USER_MULTISITE, DB_PASSWORD_MULTISITE, TABLE_PREFIX_MULTISITE, $subsite_db_name);
		if ($msg->containsErrors()) {
			$this->finalize();
			return false;
		}
		
		// import languages and tables into subsite database
		$sqlUtility = new SqlUtility();
		$sqlUtility->queryFromFile(AT_INCLUDE_PATH . 'install/db/atutor_schema.sql', TABLE_PREFIX_MULTISITE, false);
		$sqlUtility->queryFromFile(AT_INCLUDE_PATH . 'install/db/atutor_language_text.sql', TABLE_PREFIX_MULTISITE, false);
		if ($msg->containsErrors()) {
			$this->finalize();
			return false;
		}
		$msg->addFeedback('SUBSITE_TABLES_CREATED');
		
		// create mysql user/pwd for subsite database
		// the super mysql id for creating mysql user is stored in include/config_multisite.inc.php
		$mysql_account = $this->get_unique_mysql_account($subsite_db_name);
		$mysql_pwd = $this->create_mysql_user(DB_HOST_MULTISITE, $mysql_account, $subsite_db_name);
		
		if (!$mysql_pwd) {
			$this->finalize();
			return false;
		}
		$msg->addFeedback(array('MYSQL_ACCT_CREATED', $mysql_account));
		
		// Write subsite include/config.inc.php
		$filename = $this->subsite_main_dir . $this->site_url . '/include/config.inc.php';
		
		if (!file_exists($filename) || !is_writeable($filename)) {
			$msg->addError(array('FILE_NOT_WRITABLE', $filename));
			$this->finalize();
			return false;
		}
		
		$comments = '/*'.str_pad(' This file was generated by the ATutor '.$new_version. ' installation script.', 70, ' ').'*/'."\n".
		            '/*'.str_pad(' File generated '.date('Y-m-d H:m:s'), 70, ' ').'*/';
		$content_dir = $this->subsite_main_dir . $this->site_url . '/content/';
		
		$smtp = MAIL_USE_SMTP ? 'true' : 'false';
		
		write_config_file($filename, $mysql_account, $mysql_pwd, DB_HOST_MULTISITE, 
		                  DB_PORT_MULTISITE, $subsite_db_name, TABLE_PREFIX_MULTISITE,
		                  $comments, $content_dir, $smtp, AT_FORCE_GET_FILE);
		chmod($filename, 0444);
		$msg->addFeedback(array('CONFIG_FILE_WRITTEN', $filename));

		$this->switch_subsite_manage_db();
		
		// update database
		if (!$this->update_table()) {
			$this->finalize();
			return false;
		}
		$msg->addFeedback('MANAGE_TABLE_UPDATED');
		
		$full_site_url = AT_SERVER_PROTOCOL . $this->site_url;
		$msg->addFeedback(array('CREATE_SUBSITE_SUCCESSFUL', $full_site_url, $full_site_url));
		
		$this->finalize();
		return true;
	}

	/**
	 * switch to use the multisite management database
	 */
	private function switch_subsite_manage_db() {
		global $db_multisite;
		
		mysql_select_db(DB_NAME_MULTISITE, $db_multisite);
	}
	
	/**
	 * Create the phisical subsite directories and config file
	 */
	private function create_subsite_dir() {
		global $msg;
		global $db_multisite;
		
		// Create the phisical directory
		$subsite_full_path = $this->subsite_main_dir . $this->site_url;
		$shell_output = shell_exec($this->make_multi_script . " " . $subsite_full_path);
		
		if (!is_dir($subsite_full_path)) {
			$msg->addError(array('SHELL_PERMISSION', $this->make_multi_script, $subsite_full_path, $shell_output));
			return false;
		}
		return true;
	}
	
	/**
	 * Find out if the given mysql account already exists
	 * @param $account_name
	 * @return true/false
	 */
	private function is_mysql_account_unique($account_name) {
		global $db_multisite;
		
		$sql = "select user from mysql.user where user='" . $account_name . "'";
		$result = mysql_query($sql, $db_multisite);
		
		return mysql_num_rows($result) == 0 ? true : false;
	}
	
	/**
	 * Return a unique mysql user name
	 */
	private function get_unique_mysql_account($account_prefix) {
		if ($this->is_mysql_account_unique($account_prefix)) {
			return $account_prefix;
		} else {
			while (true) {
				$account_name = $this->get_suffixed_string($account_prefix);
				if ($this->is_mysql_account_unique($account_name)) {
					return $account_name;
				}
			}
		}
	}
	
	/**
	 * Create mysql user and grant full permission on subsite database
	 */
	private function create_mysql_user($db_host, $mysql_account, $subsite_db_name) {
		global $db_multisite, $msg;
		
		$mysql_pwd = $this->get_random_string(10);
		
		$sql = "CREATE USER '" . $mysql_account . "'@'" . $db_host . "' IDENTIFIED BY '" . $mysql_pwd . "'";
		if (!mysql_query($sql, $db_multisite)) {
			$msg->addError(array('CREATE_MYSQL_ACCT_FAILED', $mysql_account, mysql_error($db_multisite), DB_USER_MULTISITE));
			return false;
		}
		
		$sql = "GRANT SELECT,INSERT,UPDATE,DELETE,CREATE,DROP ON " . $subsite_db_name . 
		       ".* TO '" . $mysql_account . "'@'" . $db_host . "'";
		if (!mysql_query($sql, $db_multisite)) {
			$msg->addError(array('GRANT_PRIV_FAILED', DB_USER_MULTISITE));
			return false;
		}
		
		return $mysql_pwd;
	}
	
	/**
	 * Update table "subsites"
	 */
	private function update_table() {
		global $db_multisite, $msg;
		
		// insert the new site into db
		$sql = "INSERT INTO " . TABLE_PREFIX_MULTISITE . "subsites(site_url, enabled) VALUES('" .$this->site_url ."', '" . $enabled ."')";
		
		if(mysql_query($sql, $db_multisite)){
			return true;
		} else{
			$msg->addError(array('UPDATE_DB_FAILED', mysql_error()));
			return false;
		}
	}
	/**
	 * Return the directory where subsites reside.
	 */
	private function get_subsite_main_dir() {
		return realpath($_SERVER['DOCUMENT_ROOT'] . '/../') . '/';
	}
	
	/**
	 * Return the full URL based on the given site name
	 * @param string $site_name
	 * @return string site URL
	 * @see module.php for the definition of MM_COMMON_DOMAIN
	 */
	private function get_site_url($site_name) {
		return $site_name. '.' . MM_COMMON_DOMAIN;
	}
	
	/**
	 * Return a string that is suffixed with a fixed-length of the random integer string.
	 */
	private function get_suffixed_string($prefix, $digits = 4) {
		return $prefix . str_pad(rand(0, pow(10, $digits)-1), $digits, '0', STR_PAD_LEFT);
	}
	
	/**
	 * Return a random string with certain length.
	 * The random string only contains the charactors from the provided charset.
	 */
	private function get_random_string($length, $charset='ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789'){
		$str = '';
		$count = strlen($charset);
		while ($length--) {
			$str .= $charset[mt_rand(0, $count-1)];
		}
		
		return $str;
	}
	
	/**
	 * Check if the site url is unique
	 * Make sure the uniqueness in database and the phisical directory
	 * @param string  $site_url
	 * @return true or false
	 */
	private function is_site_unique($site_url) {
		global $db_multisite;
		
		$sql = "SELECT * FROM " . TABLE_PREFIX_MULTISITE. "subsites WHERE site_url='" . $site_url . "'";
		$result = mysql_query($sql, $db_multisite);
		
		return (mysql_num_rows($result) == 0 && !is_dir($this->subsite_main_dir . $site_url)) ? true : false;
	}
	
	/**
	 * Return the requested number of unique site urls based on the given site name.
	 * For instance, if users' desired site name is "hello" but it has been used, return
	 * a number of other not-in-use site names that start with "hello", for instance, "hello1" etc. 
	 * @param string   $desire_site_name
	 * @param integer  $num_of_sites
	 * @return an array of suggested site urls: "hello1.atutor.com, hello2.atutor.com"
	 */
	function get_unique_site_urls($desired_site_name, $num_of_sites = 3) {
		$count = 0;
		
		while (true) {
			if ($count == $num_of_sites) {
				break;
			}
			
			// generate a randomized site name with the prefix of the desired site name.
			$new_site_url = $this->get_site_url($this->get_suffixed_string($desired_site_name));
			
			if ($this->is_site_unique($new_site_url)) {
				$count++;
				$sites[] = $new_site_url;
			}
		}
		
		return $sites;
	}

	/**
	 * Return a unique database name
	 */
	private function get_unique_db_name($db_prefix, $db_host, $db_port, $db_login, $db_pwd) {
		global $db_multisite;
		
		if (!mysql_select_db($db_prefix, $db_multisite)) {
			return $db_prefix;
		} else {
			while (true) {
				$db_name = $this->get_suffixed_string($db_prefix);
				if (!mysql_select_db($db_name, $db_multisite)) {
					return $db_name;
				}
			}
		}
	}
	
	/**
	 * switch back to ATutor main database
	 */
	private function finalize(){
		global $db;
		
		// switch back to the ATutor main database
		mysql_select_db(DB_NAME, $db);
	}
}

?>